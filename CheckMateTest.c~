

int TestCheckMate(THEBOARD Board, int color, ALIST *white, ALIST *black)
{	
	//Local Variables
	int	state = 0; //0 - no check, 1 - check, 2 -checkMate
	int	xKing, yKing; //coordinates {0, 1, ..., 7} of "color" King.
	int	xAttacker, yAttacker; //coordinates of 1-"color" attacker.
	
	PIECE 	*attacker 		= NULL; //pointer to attacking piece if found
	MLIST 	*possibleMoves 	= NULL; //used to generate a list of moves per piece
	MENTRY 	*currentMEntry 	= NULL; //used to traverse possibleMovesList of a player we are inspecting (to kill attacker/block)
	MOVE	*currentMove	= NULL; //used to keep track of Move struct of MENTRY
	AENTRY 	*currentAEntry 	= NULL; //used to traverse AliveList of int color
	
	
	
	//First see if "color is in check
	attacker = TestCheckLegal(Board, color); //previous: state = TestCheckLegal(...)
	
	//If "color is not in check, return 0
	if (attacker == NULL) //revious: state ==0
		return 0;
	
	//"color" is in check, must test for checkMate	
	else if (attacker != NULL) //previous: state == 1
	{
		/* 
			Control Flow
done			1.	Scan color's Alive list and note down the King Coordinate using xKing and yKing.note the attacker's coordinates too 
			2.	*reserve*
			3.	Order of verifying the checkMate
				3.1	Note the attacker's coordinates, call Generate LegalMoves for all color's pieces to kill attacker
					3.1.1	Handle whether black or white ALIST is traversed
						3.1.1.a	Traverse appropriate ALIST
					3.1.2	Must create a case statement and call appropriate type
					3.1.3	After List Generated, traverse and compare x/yfinal to x/yattacker
						3.1.3.a	if no similarity, then delete the list and back to 3.1.1.a
						3.1.3.b if similarity, we can kill attacker thus returning 1 - we are in check only 9
				
				3.2 if failed, try to move the king in nbhd.		
				3.3 If failed, then find attacker's line of motion, and try and block it. Special exclusion to 3.2: attacker of type knight
					3.3 can be implemented into 3.1 *possibly*
				 
		*/
		
		//traverse board, find color's King. Note X, Y coordinate
		int end = 0; //simple flag for when we find King
		for (int i = 0; i < 8; i++)
		{
			for (int j = 0; j < 8; j++)
			{
				if (Board.board[i][j]->type == 'k' && Board.board[i][j]->color == color)
				{
					xKing = i;
					yKing = j;
					end = 1; //set the flag
					break; //break inner for
				}
			}
			
			if(end) break; //found King, so break outer for
		}
					
					
		
		xAttacker = attacker.Xpos;
		yAttacker = attacker.Ypos;
		
		//handle which AliveList to traverse to kill attacker's move
		if (color == 0) //white;
			currentAEntry = white->First;
		else if (color == 1) //black
			currentAEntry = black->First;
		
		
		while (currentAEntry) //traverse thru the list until EndOfList
		{
			switch(currentAEntry.AlivePiece->type) //Case is what type of piece we have for List {Q, B, R, N, P}. no king
			{
				case ('Q' || 'q'):
				{
					possibleMoves = QueenLegalMoveListGen(currentAEntry.AlivePiece, Board);
					break;
				}
				case ('B' || 'b'):
				{
					possibleMoves = BishopLegalMoveListGen(currentAEntry.AlivePiece, Board);
					break;
				}
				case ('R' || 'r');
				{
					possibleMoves = RookLegalMoveListGen(currentAEntry.AlivePiece, Board);
					break;
				}
				case ('N' || 'n'):
				{
					possibleMoves = KnightLegalMoveListGen(currentAEntry.AlivePiece, Board);
					break;
				}
				case ('P' || 'p'):
				{
					possibleMoves = PawnLegalMoveListGen(currentAEntry.AlivePiece, Board);
					break;
				}
			} //end switch, we have a piece and the MLIST. traverse MLIST until if x/yAttackr is found
			
			//Traverse thru the generatedMoveList and find a match for finX == xattacker, and for Y.
			if(possibleMoves.Length != 0)
			{
				currentMEntry = possibleMoves.First;
				
				while(currentMEntry)
				{
					currentMove = currentMEntry.PotentialMove;
					
					if((currentMove.finX == xAttacker) && (currentMove.finY == yAttacker)) //compare final coord
						return 1; //we can kill the attacker, thus only in check and return 1;
					
					currentMEntry = currentMEntry->Next;
				} //end while loop of currentPiece Moves
				
			}
			
			DeleteMoveList(possibleMoves); //delete possibleMoves so we can create a new list for next Alive.
			
		} //end of aliveListMoves. If we reach this point, no color player can attack 1-color attacker.
		
		//3.2
		//Now generate a MASSIVE legalList of opposing side. All moves of all players goes here. 
		//Generate LegalList for color's king, then for each legalMove of color's king compare it to MASSIVEList's final moves. If there is no move for king, we must check to block the king.
		//If king has a spot to move, then we return 1 since king is in check and not mate
		
		//3.3
		//open to some ideas... i already have implementation ideas but maybe we can make it easier. :)
		
		
	}



	return 1;
}
